# coding: utf-8

"""
    REST API Mapy.cz geocoding methods

    Get coordinates and location for given geographic entity (e.g. address, city, WGS coordinates)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictFloat, StrictInt, StrictStr, confloat, conint, conlist, constr, validator

from typing import Any, Optional, Union

from mapy_cz_geocode.models.geocode_entity_type import GeocodeEntityType
from mapy_cz_geocode.models.geocode_result import GeocodeResult
from mapy_cz_geocode.models.rgeocode_result import RgeocodeResult

from mapy_cz_geocode.api_client import ApiClient
from mapy_cz_geocode.api_response import ApiResponse
from mapy_cz_geocode.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class GeocodingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def api_geocode_v1_geocode_get(self, query : Annotated[Optional[StrictStr], Field(description="Geographic entity name to resolve")] = None, lang : Annotated[Optional[Any], Field(description="Preferred language for result entity names")] = None, limit : Annotated[Optional[StrictInt], Field(description="Maximum number of results (default 5, upper limit 15)")] = None, type : Annotated[Optional[conlist(GeocodeEntityType)], Field(description="Return selected entity types only")] = None, locality : Annotated[Optional[conlist(constr(strict=True))], Field(description="Return results only from these localities. It may be in form of comma-separated locality names (e. g. `Praha 5`, `Lhota u Kolína`), country codes (cz, gb, us, ...) or rectangles `BOX({minLon},{minLat},{maxLon},{maxLat})` or a mix of them. Location names (except country codes) are internally converted to bounding boxes, so using box arguments is preferred to avoid ambiguities - resolved boxes for locality names are returned in response (or \"Not found!\" for unknown localities) to help with this. On the other hand, country codes are preferred over their bounding boxes, because they allow precise filtering and avoid enge-cases near the date-line. ")] = None, prefer_b_box : Annotated[Optional[conlist(Union[StrictFloat, StrictInt], max_items=4, min_items=4)], Field(description="Prefer results from this box (not a filter). Conflicts with `near`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{minLon},{minLat},{maxLon},{maxLat}`")] = None, prefer_near : Annotated[Optional[conlist(Union[StrictFloat, StrictInt], max_items=2, min_items=2)], Field(description="Prefer results near this position (not a filter). Conflicts with `box`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{lon}, {lat}`")] = None, prefer_near_precision : Annotated[Optional[Union[confloat(ge=0.0, strict=True), conint(ge=0.0, strict=True)]], Field(description="Precision of parameter `near` in meters (use to prefer results from a circle)")] = None, **kwargs) -> GeocodeResult:  # noqa: E501
        """Find entities for given search query  # noqa: E501

        Obtains coordinates and additional information (like surrounding regional structure) based on textual location query (addresses, streets, cities, ...). Rate limit is 100 requests per second per API key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_geocode_v1_geocode_get(query, lang, limit, type, locality, prefer_b_box, prefer_near, prefer_near_precision, async_req=True)
        >>> result = thread.get()

        :param query: Geographic entity name to resolve
        :type query: str
        :param lang: Preferred language for result entity names
        :type lang: Language
        :param limit: Maximum number of results (default 5, upper limit 15)
        :type limit: int
        :param type: Return selected entity types only
        :type type: List[GeocodeEntityType]
        :param locality: Return results only from these localities. It may be in form of comma-separated locality names (e. g. `Praha 5`, `Lhota u Kolína`), country codes (cz, gb, us, ...) or rectangles `BOX({minLon},{minLat},{maxLon},{maxLat})` or a mix of them. Location names (except country codes) are internally converted to bounding boxes, so using box arguments is preferred to avoid ambiguities - resolved boxes for locality names are returned in response (or \"Not found!\" for unknown localities) to help with this. On the other hand, country codes are preferred over their bounding boxes, because they allow precise filtering and avoid enge-cases near the date-line. 
        :type locality: List[str]
        :param prefer_b_box: Prefer results from this box (not a filter). Conflicts with `near`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{minLon},{minLat},{maxLon},{maxLat}`
        :type prefer_b_box: List[float]
        :param prefer_near: Prefer results near this position (not a filter). Conflicts with `box`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{lon}, {lat}`
        :type prefer_near: List[float]
        :param prefer_near_precision: Precision of parameter `near` in meters (use to prefer results from a circle)
        :type prefer_near_precision: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GeocodeResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_geocode_v1_geocode_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_geocode_v1_geocode_get_with_http_info(query, lang, limit, type, locality, prefer_b_box, prefer_near, prefer_near_precision, **kwargs)  # noqa: E501

    @validate_arguments
    def api_geocode_v1_geocode_get_with_http_info(self, query : Annotated[Optional[StrictStr], Field(description="Geographic entity name to resolve")] = None, lang : Annotated[Optional[Any], Field(description="Preferred language for result entity names")] = None, limit : Annotated[Optional[StrictInt], Field(description="Maximum number of results (default 5, upper limit 15)")] = None, type : Annotated[Optional[conlist(GeocodeEntityType)], Field(description="Return selected entity types only")] = None, locality : Annotated[Optional[conlist(constr(strict=True))], Field(description="Return results only from these localities. It may be in form of comma-separated locality names (e. g. `Praha 5`, `Lhota u Kolína`), country codes (cz, gb, us, ...) or rectangles `BOX({minLon},{minLat},{maxLon},{maxLat})` or a mix of them. Location names (except country codes) are internally converted to bounding boxes, so using box arguments is preferred to avoid ambiguities - resolved boxes for locality names are returned in response (or \"Not found!\" for unknown localities) to help with this. On the other hand, country codes are preferred over their bounding boxes, because they allow precise filtering and avoid enge-cases near the date-line. ")] = None, prefer_b_box : Annotated[Optional[conlist(Union[StrictFloat, StrictInt], max_items=4, min_items=4)], Field(description="Prefer results from this box (not a filter). Conflicts with `near`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{minLon},{minLat},{maxLon},{maxLat}`")] = None, prefer_near : Annotated[Optional[conlist(Union[StrictFloat, StrictInt], max_items=2, min_items=2)], Field(description="Prefer results near this position (not a filter). Conflicts with `box`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{lon}, {lat}`")] = None, prefer_near_precision : Annotated[Optional[Union[confloat(ge=0.0, strict=True), conint(ge=0.0, strict=True)]], Field(description="Precision of parameter `near` in meters (use to prefer results from a circle)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Find entities for given search query  # noqa: E501

        Obtains coordinates and additional information (like surrounding regional structure) based on textual location query (addresses, streets, cities, ...). Rate limit is 100 requests per second per API key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_geocode_v1_geocode_get_with_http_info(query, lang, limit, type, locality, prefer_b_box, prefer_near, prefer_near_precision, async_req=True)
        >>> result = thread.get()

        :param query: Geographic entity name to resolve
        :type query: str
        :param lang: Preferred language for result entity names
        :type lang: Language
        :param limit: Maximum number of results (default 5, upper limit 15)
        :type limit: int
        :param type: Return selected entity types only
        :type type: List[GeocodeEntityType]
        :param locality: Return results only from these localities. It may be in form of comma-separated locality names (e. g. `Praha 5`, `Lhota u Kolína`), country codes (cz, gb, us, ...) or rectangles `BOX({minLon},{minLat},{maxLon},{maxLat})` or a mix of them. Location names (except country codes) are internally converted to bounding boxes, so using box arguments is preferred to avoid ambiguities - resolved boxes for locality names are returned in response (or \"Not found!\" for unknown localities) to help with this. On the other hand, country codes are preferred over their bounding boxes, because they allow precise filtering and avoid enge-cases near the date-line. 
        :type locality: List[str]
        :param prefer_b_box: Prefer results from this box (not a filter). Conflicts with `near`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{minLon},{minLat},{maxLon},{maxLat}`
        :type prefer_b_box: List[float]
        :param prefer_near: Prefer results near this position (not a filter). Conflicts with `box`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{lon}, {lat}`
        :type prefer_near: List[float]
        :param prefer_near_precision: Precision of parameter `near` in meters (use to prefer results from a circle)
        :type prefer_near_precision: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GeocodeResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'query',
            'lang',
            'limit',
            'type',
            'locality',
            'prefer_b_box',
            'prefer_near',
            'prefer_near_precision'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_geocode_v1_geocode_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('lang') is not None:  # noqa: E501
            _query_params.append(('lang', _params['lang'].value))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))
            _collection_formats['type'] = 'multi'

        if _params.get('locality') is not None:  # noqa: E501
            _query_params.append(('locality', _params['locality']))
            _collection_formats['locality'] = 'multi'

        if _params.get('prefer_b_box') is not None:  # noqa: E501
            _query_params.append(('preferBBox', _params['prefer_b_box']))
            _collection_formats['preferBBox'] = 'multi'

        if _params.get('prefer_near') is not None:  # noqa: E501
            _query_params.append(('preferNear', _params['prefer_near']))
            _collection_formats['preferNear'] = 'multi'

        if _params.get('prefer_near_precision') is not None:  # noqa: E501
            _query_params.append(('preferNearPrecision', _params['prefer_near_precision']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['headerApiKey', 'queryApiKey']  # noqa: E501

        _response_types_map = {
            '200': "GeocodeResult",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/geocode', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_rgeocode_v1_rgeocode_get(self, lon : Annotated[Union[confloat(le=180.0, ge=-180.0, strict=True), conint(le=180.0, ge=-180.0, strict=True)], Field(..., description="Location longitude in degrees (decimal point is \".\"). Positive means east, negative west.")], lat : Annotated[Union[confloat(le=90.0, ge=-90.0, strict=True), conint(le=90.0, ge=-90.0, strict=True)], Field(..., description="Location latitude in degrees (decimal point is \".\"). Positive means north, negative south.")], lang : Annotated[Optional[Any], Field(description="Preferred language for result entity names")] = None, **kwargs) -> RgeocodeResult:  # noqa: E501
        """Get regional entities for coordinates  # noqa: E501

        Reverse geocode - get regional entities for given location coordinates. Rate limit is 200 requests per second per API key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_rgeocode_v1_rgeocode_get(lon, lat, lang, async_req=True)
        >>> result = thread.get()

        :param lon: Location longitude in degrees (decimal point is \".\"). Positive means east, negative west. (required)
        :type lon: float
        :param lat: Location latitude in degrees (decimal point is \".\"). Positive means north, negative south. (required)
        :type lat: float
        :param lang: Preferred language for result entity names
        :type lang: Language
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RgeocodeResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_rgeocode_v1_rgeocode_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_rgeocode_v1_rgeocode_get_with_http_info(lon, lat, lang, **kwargs)  # noqa: E501

    @validate_arguments
    def api_rgeocode_v1_rgeocode_get_with_http_info(self, lon : Annotated[Union[confloat(le=180.0, ge=-180.0, strict=True), conint(le=180.0, ge=-180.0, strict=True)], Field(..., description="Location longitude in degrees (decimal point is \".\"). Positive means east, negative west.")], lat : Annotated[Union[confloat(le=90.0, ge=-90.0, strict=True), conint(le=90.0, ge=-90.0, strict=True)], Field(..., description="Location latitude in degrees (decimal point is \".\"). Positive means north, negative south.")], lang : Annotated[Optional[Any], Field(description="Preferred language for result entity names")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get regional entities for coordinates  # noqa: E501

        Reverse geocode - get regional entities for given location coordinates. Rate limit is 200 requests per second per API key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_rgeocode_v1_rgeocode_get_with_http_info(lon, lat, lang, async_req=True)
        >>> result = thread.get()

        :param lon: Location longitude in degrees (decimal point is \".\"). Positive means east, negative west. (required)
        :type lon: float
        :param lat: Location latitude in degrees (decimal point is \".\"). Positive means north, negative south. (required)
        :type lat: float
        :param lang: Preferred language for result entity names
        :type lang: Language
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RgeocodeResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'lon',
            'lat',
            'lang'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_rgeocode_v1_rgeocode_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('lon') is not None:  # noqa: E501
            _query_params.append(('lon', _params['lon']))

        if _params.get('lat') is not None:  # noqa: E501
            _query_params.append(('lat', _params['lat']))

        if _params.get('lang') is not None:  # noqa: E501
            _query_params.append(('lang', _params['lang'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['headerApiKey', 'queryApiKey']  # noqa: E501

        _response_types_map = {
            '200': "RgeocodeResult",
            '500': None,
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/rgeocode', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def api_suggest_v1_suggest_get(self, query : Annotated[Optional[StrictStr], Field(description="Geographic entity name to resolve")] = None, lang : Annotated[Optional[Any], Field(description="Preferred language for result entity names")] = None, limit : Annotated[Optional[StrictInt], Field(description="Maximum number of results (default 5, upper limit 15)")] = None, type : Annotated[Optional[conlist(GeocodeEntityType)], Field(description="Return selected entity types only")] = None, locality : Annotated[Optional[conlist(constr(strict=True))], Field(description="Return results only from these localities. It may be in form of comma-separated locality names (e. g. `Praha 5`, `Lhota u Kolína`), country codes (cz, gb, us, ...) or rectangles `BOX({minLon},{minLat},{maxLon},{maxLat})` or a mix of them. Location names (except country codes) are internally converted to bounding boxes, so using box arguments is preferred to avoid ambiguities - resolved boxes for locality names are returned in response (or \"Not found!\" for unknown localities) to help with this. On the other hand, country codes are preferred over their bounding boxes, because they allow precise filtering and avoid enge-cases near the date-line. ")] = None, prefer_b_box : Annotated[Optional[conlist(Union[StrictFloat, StrictInt], max_items=4, min_items=4)], Field(description="Prefer results from this box (not a filter). Conflicts with `near`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{minLon},{minLat},{maxLon},{maxLat}`")] = None, prefer_near : Annotated[Optional[conlist(Union[StrictFloat, StrictInt], max_items=2, min_items=2)], Field(description="Prefer results near this position (not a filter). Conflicts with `box`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{lon}, {lat}`")] = None, prefer_near_precision : Annotated[Optional[Union[confloat(ge=0.0, strict=True), conint(ge=0.0, strict=True)]], Field(description="Precision of parameter `near` in meters (use to prefer results from a circle)")] = None, **kwargs) -> GeocodeResult:  # noqa: E501
        """Suggest entities while typing a query  # noqa: E501

        Suggest works similarly to geocoding, but it accounts for incomplete queries, so it can be used to suggest matching entities while user is writing the location query. Rate limit is 100 requests per second per API key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_suggest_v1_suggest_get(query, lang, limit, type, locality, prefer_b_box, prefer_near, prefer_near_precision, async_req=True)
        >>> result = thread.get()

        :param query: Geographic entity name to resolve
        :type query: str
        :param lang: Preferred language for result entity names
        :type lang: Language
        :param limit: Maximum number of results (default 5, upper limit 15)
        :type limit: int
        :param type: Return selected entity types only
        :type type: List[GeocodeEntityType]
        :param locality: Return results only from these localities. It may be in form of comma-separated locality names (e. g. `Praha 5`, `Lhota u Kolína`), country codes (cz, gb, us, ...) or rectangles `BOX({minLon},{minLat},{maxLon},{maxLat})` or a mix of them. Location names (except country codes) are internally converted to bounding boxes, so using box arguments is preferred to avoid ambiguities - resolved boxes for locality names are returned in response (or \"Not found!\" for unknown localities) to help with this. On the other hand, country codes are preferred over their bounding boxes, because they allow precise filtering and avoid enge-cases near the date-line. 
        :type locality: List[str]
        :param prefer_b_box: Prefer results from this box (not a filter). Conflicts with `near`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{minLon},{minLat},{maxLon},{maxLat}`
        :type prefer_b_box: List[float]
        :param prefer_near: Prefer results near this position (not a filter). Conflicts with `box`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{lon}, {lat}`
        :type prefer_near: List[float]
        :param prefer_near_precision: Precision of parameter `near` in meters (use to prefer results from a circle)
        :type prefer_near_precision: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GeocodeResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the api_suggest_v1_suggest_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.api_suggest_v1_suggest_get_with_http_info(query, lang, limit, type, locality, prefer_b_box, prefer_near, prefer_near_precision, **kwargs)  # noqa: E501

    @validate_arguments
    def api_suggest_v1_suggest_get_with_http_info(self, query : Annotated[Optional[StrictStr], Field(description="Geographic entity name to resolve")] = None, lang : Annotated[Optional[Any], Field(description="Preferred language for result entity names")] = None, limit : Annotated[Optional[StrictInt], Field(description="Maximum number of results (default 5, upper limit 15)")] = None, type : Annotated[Optional[conlist(GeocodeEntityType)], Field(description="Return selected entity types only")] = None, locality : Annotated[Optional[conlist(constr(strict=True))], Field(description="Return results only from these localities. It may be in form of comma-separated locality names (e. g. `Praha 5`, `Lhota u Kolína`), country codes (cz, gb, us, ...) or rectangles `BOX({minLon},{minLat},{maxLon},{maxLat})` or a mix of them. Location names (except country codes) are internally converted to bounding boxes, so using box arguments is preferred to avoid ambiguities - resolved boxes for locality names are returned in response (or \"Not found!\" for unknown localities) to help with this. On the other hand, country codes are preferred over their bounding boxes, because they allow precise filtering and avoid enge-cases near the date-line. ")] = None, prefer_b_box : Annotated[Optional[conlist(Union[StrictFloat, StrictInt], max_items=4, min_items=4)], Field(description="Prefer results from this box (not a filter). Conflicts with `near`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{minLon},{minLat},{maxLon},{maxLat}`")] = None, prefer_near : Annotated[Optional[conlist(Union[StrictFloat, StrictInt], max_items=2, min_items=2)], Field(description="Prefer results near this position (not a filter). Conflicts with `box`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{lon}, {lat}`")] = None, prefer_near_precision : Annotated[Optional[Union[confloat(ge=0.0, strict=True), conint(ge=0.0, strict=True)]], Field(description="Precision of parameter `near` in meters (use to prefer results from a circle)")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Suggest entities while typing a query  # noqa: E501

        Suggest works similarly to geocoding, but it accounts for incomplete queries, so it can be used to suggest matching entities while user is writing the location query. Rate limit is 100 requests per second per API key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.api_suggest_v1_suggest_get_with_http_info(query, lang, limit, type, locality, prefer_b_box, prefer_near, prefer_near_precision, async_req=True)
        >>> result = thread.get()

        :param query: Geographic entity name to resolve
        :type query: str
        :param lang: Preferred language for result entity names
        :type lang: Language
        :param limit: Maximum number of results (default 5, upper limit 15)
        :type limit: int
        :param type: Return selected entity types only
        :type type: List[GeocodeEntityType]
        :param locality: Return results only from these localities. It may be in form of comma-separated locality names (e. g. `Praha 5`, `Lhota u Kolína`), country codes (cz, gb, us, ...) or rectangles `BOX({minLon},{minLat},{maxLon},{maxLat})` or a mix of them. Location names (except country codes) are internally converted to bounding boxes, so using box arguments is preferred to avoid ambiguities - resolved boxes for locality names are returned in response (or \"Not found!\" for unknown localities) to help with this. On the other hand, country codes are preferred over their bounding boxes, because they allow precise filtering and avoid enge-cases near the date-line. 
        :type locality: List[str]
        :param prefer_b_box: Prefer results from this box (not a filter). Conflicts with `near`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{minLon},{minLat},{maxLon},{maxLat}`
        :type prefer_b_box: List[float]
        :param prefer_near: Prefer results near this position (not a filter). Conflicts with `box`. If neither `box` nor `near` is specified, defaults to Czech Republic. Format `{lon}, {lat}`
        :type prefer_near: List[float]
        :param prefer_near_precision: Precision of parameter `near` in meters (use to prefer results from a circle)
        :type prefer_near_precision: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GeocodeResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'query',
            'lang',
            'limit',
            'type',
            'locality',
            'prefer_b_box',
            'prefer_near',
            'prefer_near_precision'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_suggest_v1_suggest_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('lang') is not None:  # noqa: E501
            _query_params.append(('lang', _params['lang'].value))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))
            _collection_formats['type'] = 'multi'

        if _params.get('locality') is not None:  # noqa: E501
            _query_params.append(('locality', _params['locality']))
            _collection_formats['locality'] = 'multi'

        if _params.get('prefer_b_box') is not None:  # noqa: E501
            _query_params.append(('preferBBox', _params['prefer_b_box']))
            _collection_formats['preferBBox'] = 'multi'

        if _params.get('prefer_near') is not None:  # noqa: E501
            _query_params.append(('preferNear', _params['prefer_near']))
            _collection_formats['preferNear'] = 'multi'

        if _params.get('prefer_near_precision') is not None:  # noqa: E501
            _query_params.append(('preferNearPrecision', _params['prefer_near_precision']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['headerApiKey', 'queryApiKey']  # noqa: E501

        _response_types_map = {
            '200': "GeocodeResult",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/v1/suggest', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
