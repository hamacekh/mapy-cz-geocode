# coding: utf-8

"""
    REST API Mapy.cz geocoding methods

    Get coordinates and location for given geographic entity (e.g. address, city, WGS coordinates)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, confloat, conint

class Coordinates(BaseModel):
    """
    Coordinates
    """
    lon: Union[confloat(le=180.0, ge=-180.0, strict=True), conint(le=180, ge=-180, strict=True)] = Field(..., description="Location longitude in degrees (decimal point is \".\"). Positive means east, negative west.")
    lat: Union[confloat(le=90.0, ge=-90.0, strict=True), conint(le=90, ge=-90, strict=True)] = Field(..., description="Location latitude in degrees (decimal point is \".\"). Positive means north, negative south.")
    __properties = ["lon", "lat"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Coordinates:
        """Create an instance of Coordinates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Coordinates:
        """Create an instance of Coordinates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Coordinates.parse_obj(obj)

        _obj = Coordinates.parse_obj({
            "lon": obj.get("lon"),
            "lat": obj.get("lat")
        })
        return _obj


