# coding: utf-8

"""
    REST API Mapy.cz geocoding methods

    Get coordinates and location for given geographic entity (e.g. address, city, WGS coordinates)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from mapy_cz_geocode.models.coordinates import Coordinates
from mapy_cz_geocode.models.geocode_entity_type import GeocodeEntityType
from mapy_cz_geocode.models.regional_entity import RegionalEntity

class GeocodeResultEntity(BaseModel):
    """
    GeocodeResultEntity
    """
    name: StrictStr = Field(...)
    label: StrictStr = Field(...)
    position: Coordinates = Field(...)
    type: GeocodeEntityType = Field(...)
    location: Optional[StrictStr] = Field(None, description="Short label for locality of resolved entity")
    regional_structure: conlist(RegionalEntity, min_items=1) = Field(..., alias="regionalStructure", description="Ordered list of parent administrative entities (smallest first).")
    zip: Optional[StrictStr] = Field(None, description="Postal code, available only in some areas and only for entity type `reg_address`)")
    __properties = ["name", "label", "position", "type", "location", "regionalStructure", "zip"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GeocodeResultEntity:
        """Create an instance of GeocodeResultEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in regional_structure (list)
        _items = []
        if self.regional_structure:
            for _item in self.regional_structure:
                if _item:
                    _items.append(_item.to_dict())
            _dict['regionalStructure'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GeocodeResultEntity:
        """Create an instance of GeocodeResultEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GeocodeResultEntity.parse_obj(obj)

        _obj = GeocodeResultEntity.parse_obj({
            "name": obj.get("name"),
            "label": obj.get("label"),
            "position": Coordinates.from_dict(obj.get("position")) if obj.get("position") is not None else None,
            "type": obj.get("type"),
            "location": obj.get("location"),
            "regional_structure": [RegionalEntity.from_dict(_item) for _item in obj.get("regionalStructure")] if obj.get("regionalStructure") is not None else None,
            "zip": obj.get("zip")
        })
        return _obj


