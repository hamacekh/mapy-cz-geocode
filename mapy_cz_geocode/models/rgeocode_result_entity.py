# coding: utf-8

"""
    REST API Mapy.cz geocoding methods

    Get coordinates and location for given geographic entity (e.g. address, city, WGS coordinates)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from mapy_cz_geocode.models.coordinates import Coordinates
from mapy_cz_geocode.models.regional_entity import RegionalEntity
from mapy_cz_geocode.models.rgeo_entity_type import RgeoEntityType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RgeocodeResultEntity(BaseModel):
    """
    RgeocodeResultEntity
    """ # noqa: E501
    name: StrictStr
    label: StrictStr
    position: Coordinates
    type: RgeoEntityType
    location: Optional[StrictStr] = Field(default=None, description="Short label for locality of resolved entity")
    regional_structure: Annotated[List[RegionalEntity], Field(min_length=1)] = Field(description="Ordered list of parent administrative entities (smallest first).", alias="regionalStructure")
    zip: Optional[StrictStr] = Field(default=None, description="Postal code, available only in some areas and only for entity type `reg_address`)")
    __properties: ClassVar[List[str]] = ["name", "label", "position", "type", "location", "regionalStructure", "zip"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RgeocodeResultEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in regional_structure (list)
        _items = []
        if self.regional_structure:
            for _item in self.regional_structure:
                if _item:
                    _items.append(_item.to_dict())
            _dict['regionalStructure'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RgeocodeResultEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "label": obj.get("label"),
            "position": Coordinates.from_dict(obj.get("position")) if obj.get("position") is not None else None,
            "type": obj.get("type"),
            "location": obj.get("location"),
            "regionalStructure": [RegionalEntity.from_dict(_item) for _item in obj.get("regionalStructure")] if obj.get("regionalStructure") is not None else None,
            "zip": obj.get("zip")
        })
        return _obj


